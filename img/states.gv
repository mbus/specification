digraph fsm {
rankdir=LR;
remincross=true;
fontname=Helvetica

pad=1

  { rank=same;
    //Top [color=blue];
  }

  { rank=same;
//    01 [color=red];
    //02 [style=invis];
    //01->02;
  }

  subgraph cluster_forward {
    style=filled;
    color=lightyellow;
    group="forward";
    rank=same;
    node [style=""] Ignore;
    node [style=""] Address_Match[label="Address\nMatch"];
    node [style="bold"] Idle;
    node [style=""] Reset;
    label="Forwarding";
  }

  subgraph cluster_recv {
    style=filled;
    color=lightcyan;
    group="recv";
    Recieve;
    Send_Acknowledge[label="Send\nAcknowledge"];
//    Acknowledge;
    label="Receiving";
  }

  subgraph cluster_send {
    style=filled;
    color=palegreen;
    group="send";
    Arbitrate;
    Send;
    Is_Acked[label="Is Acked?"];
    //Acked;
    label="Transmitting";
  }

  subgraph cluster_nc {
    style=filled;
    color=white;
    group="nc";
    NC[label="Not\nConnected"];
  }

///// Layout hacks
//  Address_Match->01 [color=red];
//  Ignore->01 [color=red];
  Ignore->Recieve [style=invis];
//  Ignore->Arbitrate [style=invis];
  //01->Recieve [style=invis];
//  01->Recieve [color=red];
//  01->Arbitrate [color=red];

  Reset -> Idle [ label = "2 CLKs"];
  Idle -> Address_Match [ label = "Arbitration\nCLK Pulse" ];
  Idle -> Arbitrate [label="Request" color=red];
  Address_Match -> Ignore [ label = "Not Match" ];
  Address_Match -> Recieve [label = "Match"];
//  Ignore -> Idle [ label = "Reset", style=dashed, constraint=false];

  Recieve -> Ignore [label="Will Not ACK", constraint=false];
  Recieve -> Send_Acknowledge [label="Message End\nSequence"];
  Send_Acknowledge -> Reset [constraint=false, style=dashed];
  //Send_Acknowledge -> Acknowledge [label=" ACK"];
//  Acknowledge -> Reset [style=dashed, constraint=false];

  NC -> Arbitrate [dir="back", label="No\nResponse", color=red];
  //Arbitrate -> NC;
  Arbitrate -> Address_Match [label="Lose\nArbitration", constraint=false];
  Arbitrate -> Send [label="Win\nArbitration"];
//  Send -> Reset [style=dashed, constraint=false];
  Send -> Is_Acked [label="Message End\nSequence"];
//  Is_Acked -> Reset [style=dashed, constraint=false];
//  Is_Acked -> Acked [label=" ACK"];
    Is_Acked -> Reset [constraint=false, style=dashed];
//  Acked -> Reset [style=dashed, constraint=false];
}
